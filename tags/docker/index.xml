<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Linuzb&#39; 的博客</title>
    <link>https://linuzb.github.io/tags/docker/</link>
    <description>Recent content in Docker on Linuzb&#39; 的博客</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Mon, 29 Apr 2024 22:01:37 +0800</lastBuildDate>
    <atom:link href="https://linuzb.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 入门文档</title>
      <link>https://linuzb.github.io/2024/04/docker-%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 29 Apr 2024 22:01:37 +0800</pubDate>
      <guid>https://linuzb.github.io/2024/04/docker-%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/</guid>
      <description>前言 本文将简单介绍 Docker 的安装与使用过程&#xA;docker 安装 docker 官方文档提供了各个系统的安装方式，参考 Install Docker Engine，但是由于国内网络环境，使用官方方式会比较慢，因此国内环境不推荐这种方式安装。下面我们介绍另一种国内安装方式。&#xA;自动化的安装方式，本节内容源自 清华大学开源镜像站|Docker CE 软件仓库，其他安装方式可以参考该文档。&#xA;Docker 提供了一个自动配置与安装的脚本，支持 Debian、RHEL、SUSE 系列及衍生系统的安装。&#xA;以下内容假定&#xA;您为 root 用户，或有 sudo 权限，或知道 root 密码； 您系统上有 curl 或 wget 1 2 3 4 5 export DOWNLOAD_URL=&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/docker-ce&amp;#34; # 如您使用 curl curl -fsSL https://get.docker.com/ | sh # 如您使用 wget wget -O- https://get.docker.com/ | sh 使用非 root 使用 docker 通过以上方式安装的docker只能通过 root 用户或者 sudo 权限使用。&#xA;接下来我们将配置非 root 用户使用 docker&#xA;创建 docker 用户组 1 sudo groupadd docker 将当前用户添加到 docker 用户组 1 sudo usermod -aG docker $USER 激活用户组配置 1 newgrp docker 测试 docker 命令 1 docker run hello-world 此命令将下载测镜像并在容器中运行。容器运行时，它会打印一条信息并退出。</description>
    </item>
    <item>
      <title>Jupyterhub Userguide</title>
      <link>https://linuzb.github.io/2024/04/jupyterhub-userguide/</link>
      <pubDate>Sun, 28 Apr 2024 16:33:37 +0800</pubDate>
      <guid>https://linuzb.github.io/2024/04/jupyterhub-userguide/</guid>
      <description>前置准备 本文是 jupyterhub on kubernetes 的使用文档，本文描述的环境基于 jupyterhub on kubernetes&#xA;在上述文档中，我们部署的 kubernetes master 节点 nodeIP 为 172.16.0.100, 因此以下教程中使用的访问 ip 都是 172.16.0.100&#xA;环境准备 内网访问 可以访问内网的浏览器&#xA;登录 使用浏览器访问 http://172.16.0.100:30080/ 认证 点击 Singn in with Github，然后在 github 页面授权&#xA;说明：&#xA;这里仅使用 github oauth 做认证鉴权，暂无其它依赖，原理课参考文档 Authorizing OAuth apps - GitHub Docs github 账号的用户名需要为全字母及数字，暂不支持非字母数字之外的其他符号 应用选择 登录完成之后就会进入一个应用服务页面&#xA;选择一个合适的应用环境，然后点击底部的 start 按钮，即可进入环境 自定义应用 TODO： 待补充&#xA;应用环境介绍 功能介绍 界面简介 应用创建完成后，就会跳转到jupyterlab页面 介绍一下主要功能&#xA;启动一个luncher，即页面右侧部分，在 luncher 中可以打开各种工具 上传文件按钮，点击后弹出一个对话框，选择需要上传到文件即可。如果想上传一个目录，可以先在本地将目录打包成一个压缩包，然后上传。上传前可以先按照3. 切换到对应的工作目录。 工作目录，双击可打开文件以及文件夹。上传文件以及打开vscode都是以工作目录为基础，例如，当前工作目录为~/Projects/data, 则上传目标路径即为~/Projects/data 新建一个jupyter notebook 以工作目录为基础打开vscode 打开一个terminal，可执行linux命令 vscode 打开方式：在luncher 中点击vscode 图标即可打开</description>
    </item>
    <item>
      <title>Jupyterhub on Kubernetes</title>
      <link>https://linuzb.github.io/2024/04/jupyterhub-on-kubernetes/</link>
      <pubDate>Sun, 28 Apr 2024 15:57:55 +0800</pubDate>
      <guid>https://linuzb.github.io/2024/04/jupyterhub-on-kubernetes/</guid>
      <description>前置准备 首先需要部署 kubernetes 集群，参考k8s deploy Helm | Installing Helm 安装 helm 存储：Longhorn provider 部署 Longhorn 参考 Longhorn deploy&#xA;接入 github oauth 本文使用 github oauth 作为认证方式，首先我们需要提前注册一个 GitHub OAuth 应用程序，请参阅 GitHub 有关注册应用程序的官方文档 registering an app.&#xA;然后我们得到三个信息&#xA;client-id client-secret oauthCallbackUrl 为了避免在配置中明文保存密码，我们将以上信息通过 secret 的形式存储在 Kubernetes 中，可以使用挂载 secret 的形式使用 secret 变量。&#xA;创建secret 接下来我们给 client-id 和 client-secret 创建secret&#xA;1 2 3 echo -n &amp;#34;client-id&amp;#34; | base64 echo -n &amp;#34;client-secret&amp;#34; | base64 echo -n &amp;#34;oauthCallbackUrl&amp;#34; | base64 将以上结果填充到用于创建 secret 的 yaml 中</description>
    </item>
  </channel>
</rss>
